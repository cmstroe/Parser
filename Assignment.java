/* Assignment.java */
/* Generated By:JavaCC: Do not edit this line. Assignment.java */
import java.util.ArrayList;
// TODO change to a hash map for better performance
public class Assignment implements AssignmentConstants {
    @SuppressWarnings("unchecked")
    public static void main(String[] args) throws ParseException, TokenMgrError {
        Assignment parser = new Assignment(System.in);
        ArrayList<TreeNode> functions = new ArrayList<TreeNode>();
        try{
            functions = parser.Parse();
        } catch(ParseException e)
        {
            String err = "Error: ";
            err += "Expected token "+e.tokenImage[e.expectedTokenSequences[0][0]];
            if (e.currentToken != null)
                err += " after token : \u005c""+e.currentToken+"\u005c"";
            ReportError(err);
        }
        TreeNode temp = findFunction(functions, "MAIN");
        boolean safe = checkInfiniteloops(functions, temp, new ArrayList<String>());
        if (safe)
        {
            int value = evaluate(functions, temp, -1);
            System.out.println(value);
        } else
        {
            System.out.println("Diverges");
        }
        System.out.println("PASS");
    }

    public static boolean checkInfiniteloops(ArrayList<TreeNode> functions, TreeNode node, ArrayList<String> previous)
    {
        if (node.type == Node.FUNCTION)
        {
            if (previous.contains(node.function_name))
                return false;
            previous.add(node.function_name);
            return checkInfiniteloops(functions, findFunction(functions, node.function_name).lchild, previous);
        }
        if (node.lchild != null && node.rchild != null)
            return (checkInfiniteloops(functions, node.lchild, previous) & checkInfiniteloops(functions, node.rchild, previous));
        if (node.lchild != null)
            return checkInfiniteloops(functions, node.lchild, previous);
        if (node.rchild != null)
            return checkInfiniteloops(functions, node.rchild, previous);
        return true;
    }

    private static int evaluate(ArrayList<TreeNode> functions, TreeNode tree, int param)
    {
        if (tree.type == Node.MAIN)
            return evaluate(functions, tree.lchild, param);
        if (tree.type == Node.FUNCTION)
            return evaluate(functions, findFunction(functions, tree.function_name).lchild, evaluate(functions, tree.lchild, param));
        switch(tree.type)
        {
            case PARAMETER:
                return param;
            case NUMBER:
                return tree.value;
            case OPERAND:
                if (tree.operand == Operand.ADD)
                    return evaluate(functions, tree.lchild, param) + evaluate(functions, tree.rchild, param);
                return evaluate(functions, tree.lchild, param) * evaluate(functions, tree.rchild, param);
        }
        return 0;
    }

    private static TreeNode findFunction(ArrayList<TreeNode> functions, String function_name) throws TokenMgrError
    {
        if (function_name.equals("MAIN"))
            for (TreeNode i : functions)
                if (i.type == Node.MAIN)
                    return i;
        for (TreeNode i : functions)
            if (i.type == Node.FUNCTION && i.function_name.equals(function_name))
                return i;
        ReportError("Error: Call to an undefined function: "+function_name);
        return null;
    }

    private static void ReportError(String err)
    {
        System.err.println(err);
        System.out.println("FAIL");
        System.exit(-1);
    }

// Cannot seem to make it return ArrayList<String>
  static final public ArrayList Parse() throws ParseException {Boolean HasMain = false;
    ArrayList<TreeNode> functions = new ArrayList<TreeNode>();
    TreeNode function;
    label_1:
    while (true) {
      if (jj_2_1(2147483647)) {
        function = Main();
if (HasMain)
                ReportError("Error: Main function defined multiple times");
            HasMain = true;
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DEF:{
          function = Function();
for (TreeNode i : functions)
                if (i.function_name.equals(function.function_name))
                    ReportError("Error: Function " + function.function_name + " defined multiple times");
            functions.add(function);
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEF:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
if (!HasMain)
            ReportError("Error: No Main function found");
        {if ("" != null) return functions;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode Main() throws ParseException {TreeNode function;
    jj_consume_token(DEF);
    jj_consume_token(SPACE);
    jj_consume_token(MAIN);
    jj_consume_token(SPACE);
    jj_consume_token(LB);
    jj_consume_token(SPACE);
    function = FunctionBody("");
    jj_consume_token(SPACE);
    jj_consume_token(RB);
    jj_consume_token(SPACE);
    jj_consume_token(SC);
    jj_consume_token(EOL);
{if ("" != null) return new TreeNode(Node.MAIN, function);}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode Function() throws ParseException {Token param;
    Token function;
    TreeNode subtree;
    jj_consume_token(DEF);
    jj_consume_token(SPACE);
    function = jj_consume_token(FUNC);
    jj_consume_token(SPACE);
    param = jj_consume_token(PARAM);
    jj_consume_token(SPACE);
    jj_consume_token(LB);
    jj_consume_token(SPACE);
    subtree = FunctionBody(param.image);
    jj_consume_token(SPACE);
    jj_consume_token(RB);
    jj_consume_token(SPACE);
    jj_consume_token(SC);
    jj_consume_token(EOL);
{if ("" != null) return new TreeNode(Node.FUNCTION, function.image, subtree);}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode FunctionBody(String param) throws ParseException {TreeNode E;
    TreeNode F;
    E = E(param);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(ADD);
      F = E(param);
E = new TreeNode(Node.OPERAND, Operand.ADD, E, F);
    }
{if ("" != null) return E;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode E(String param) throws ParseException {TreeNode E;
    TreeNode F;
    E = F(param);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(MUL);
      F = F(param);
E = new TreeNode(Node.OPERAND, Operand.MUL, E, F);
    }
{if ("" != null) return E;}
    throw new Error("Missing return statement in function");
  }

  static final public TreeNode F(String param) throws ParseException {Token p;
    Token num;
    TreeNode function;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      num = jj_consume_token(NUM);
{if ("" != null) return new TreeNode(Node.NUMBER, Integer.parseInt(num.image));}
      break;
      }
    case FUNC:{
      p = jj_consume_token(FUNC);
      jj_consume_token(LP);
      function = FunctionBody(param);
      jj_consume_token(RP);
{if ("" != null) return new TreeNode(Node.FUNCTION, p.image, function);}
      break;
      }
    case PARAM:{
      p = jj_consume_token(PARAM);
if (param.equals(""))
            param = "none";
        if (!param.equals(p.image))
            ReportError("Error: Unknown parameter \u005c""+p.image+"\u005c" in function where parameter should be \u005c""+param+"\u005c"");
        {if ("" != null) return new TreeNode(Node.PARAMETER);}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(DEF)) return true;
    if (jj_scan_token(SPACE)) return true;
    if (jj_scan_token(MAIN)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AssignmentTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800,0x800,0x20,0x40,0xe000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Assignment(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Assignment(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AssignmentTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Assignment(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AssignmentTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Assignment(AssignmentTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AssignmentTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[17];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 17; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

// have the first child of root be the main call, have the rest be function definitions

enum Node
{
    MAIN, FUNCTION, NUMBER, OPERAND, PARAMETER, SUBTREE
}

enum Operand
{
    ADD, MUL
}

class TreeNode
{
    Node type;
    String function_name;
    TreeNode rchild;
    TreeNode lchild;
    int value;
    Operand operand;

    public TreeNode(Node type)
    {
        this.type = type;
    }

    public TreeNode(Node type, TreeNode lchild)
    {
        this.type = type;
        this.lchild = lchild;
    }

    public TreeNode(Node type, String function_name, TreeNode lchild)
    {
        this.type = type;
        this.function_name = function_name;
        this.lchild = lchild;
    }

    public TreeNode(Node type, int value)
    {
        this.type = type;
        this.value = value;
    }

    public TreeNode(Node type, Operand operand, TreeNode lchild, TreeNode rchild)
    {
        this.type = type;
        this.operand = operand;
        this.lchild = lchild;
        this.rchild = rchild;
    }
}
